#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat <<EOM
Usage: $(name "${BASH_SOURCE[0]}") [-u url] [-n name] [-v] [-h]

Message contents will be read from arguments or stdin.

Available options:
-u    Webhook url
-n    Message name
-v    Enable verbose output
-h    Print this help and exit
EOM
  exit
}

log() {
  echo >&2 "$*"
}

check_dependency() {
  if ! command -v "$1" >/dev/null 2>&1; then
    log "missing dependency: $1"
    exit 1
  fi
}

check_dependency curl

url=""
name=""
while getopts u:n:vh opt; do
  case $opt in
  u) url="$OPTARG" ;;
  n) name="$OPTARG" ;;
  v) set -x ;;
  h | *) usage ;;
  esac
done
shift $((OPTIND - 1))

# args
text="$*"

# stdin
if [[ -p /dev/stdin ]]; then
  while IFS= read -r line; do
    text+="${line}"
  done </dev/stdin
fi

if [[ -z $url ]]; then
  log "webhook url required"
  exit 1
fi

if [[ -z $text ]]; then
  log "missing message content"
  exit 1
fi

# TODO: clean this up! (add elements to existing json with jq?)
# https://stackoverflow.com/questions/48470049/build-a-json-string-with-bash-variables
# https://spin.atomicobject.com/2021/06/08/jq-creating-updating-json/
# https://jpmens.net/2016/03/05/a-shell-command-to-create-json-jo/
if [[ -n $name ]]; then
  payload=$(echo '{"username": "", "content": ""}' |
    jq --raw-output --arg name "$name" '.username |= $name' |
    jq --raw-output --arg text "$text" '.content |= $text')
else
  payload=$(echo '{"content": ""}' |
    jq --raw-output --arg text "$text" '.content |= $text')
fi

curl \
  --request POST \
  --header "Content-Type: application/json" \
  --data "$payload" \
  "$url"
